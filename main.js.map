{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project/./src/utils/constants.js","webpack://mesto-project/./src/components/Section.js","webpack://mesto-project/./src/components/Card.js","webpack://mesto-project/./src/components/FormValidator.js","webpack://mesto-project/./src/components/Popup.js","webpack://mesto-project/./src/components/PopupWithForm.js","webpack://mesto-project/./src/components/PopupWithApply.js","webpack://mesto-project/./src/components/PopupWithImage.js","webpack://mesto-project/./src/components/Api.js","webpack://mesto-project/./src/components/UserInfo.js","webpack://mesto-project/./src/components/Loader.js","webpack://mesto-project/./src/pages/index.js"],"sourcesContent":["export const cardListSelector = \"cards__list\";\r\nexport const cardTemplateSelector = \"#card-template\";\r\nexport const cardElementSelector = \".card\";\r\nexport const cardImageSelector = \".card__image\";\r\nexport const cardTitleSelector = \".card__title\";\r\nexport const cardDeleteBtnSelector = \".card__delete-button\";\r\nexport const cardDeleteBtnInactiveModifier = \"card__delete-button_inactive\";\r\nexport const cardLikeBtnSelector = \".card__like-button\";\r\nexport const cardLikeBtnActiveModifier = \"card__like-button_active\";\r\nexport const cardLikesCountSelector = \".card__likes\";\r\n// селекторы элементов разметки карточек\r\n\r\nexport const popupPreviewImageSelector = \"popup_type_image-preview\";\r\nexport const popupEditProfileSelector = \"popup_type_edit-profile\";\r\nexport const popupEditAvatarSelector = \"popup_type_edit-avatar\";\r\nexport const popupAddCardSelector = \"popup_type_add-card\";\r\nexport const popupDeleteCardSelector = \"popup_type_delete-card\";\r\nexport const popupCloseBtnSelector = \"popup__close-button\";\r\nexport const popupOpenedSelector = \"popup_opened\";\r\nexport const popupImageSelector = \"popup__image\";\r\nexport const popupImageTitleSelector = \"popup__image-title\";\r\n// селекторы элементов разметки модальных окон\r\n\r\nexport const formSelector = \".form\";\r\nexport const formFieldSelector = \".form__field-input\";\r\nexport const formSubmitBtnSelector = \".form__submit-button\";\r\n// селекторы элементов разметки модальных окон\r\n\r\nexport const profileTitleSelector = \"profile__title\";\r\nexport const profileSubtitleSelector = \"profile__subtitle\";\r\nexport const profileAvatarSelector = \"profile__avatar\";\r\nexport const profileAvatarLoaderSelector = 'profile__loader';\r\n// селекторы элементов разметки профиля пользователя\r\n\r\nexport const loaderVisibleSelector = 'loader_visible';\r\n// селекторы элементов разметки лоадера\r\n\r\nexport const formEditProfile = document.querySelector(\"#formEditProfile\");\r\nexport const formEditProfileNameField = formEditProfile.elements[\"name\"];\r\nexport const formEditProfileAboutField = formEditProfile.elements[\"about\"];\r\nexport const formEditAvatar = document.querySelector(\"#formEditAvatar\");\r\nexport const formAddCard = document.querySelector(\"#formAddCard\");\r\nexport const profileAvatarContainer = document.querySelector(\r\n  \".profile__avatar-container\"\r\n);\r\nexport const buttonEditProfile = document.querySelector(\r\n  \".profile__edit-button\"\r\n);\r\nexport const buttonAddCard = document.querySelector(\".profile__add-button\");\r\n// элементы страницы\r\n\r\nexport const validationConfig = {\r\n  formSelector: \".form\",\r\n  fieldsetSelector: \".form__input-container\",\r\n  inputSelector: \".form__field-input\",\r\n  submitButtonSelector: \".form__submit-button\",\r\n  inactiveButtonClass: \"form__submit-button_inactive\",\r\n  inputErrorClass: \"form__field-input_type_error\",\r\n  errorClass: \"form__field-error_active\",\r\n};\r\n// конфиг валидации форм\r\n","export default class Section {\r\n  constructor({ data, renderer }, containerSelector) {\r\n    this._renderedItems = data;\r\n    this._renderer = renderer;\r\n    this._container = document.querySelector(`.${containerSelector}`);\r\n  }\r\n\r\n  // новый элемент в контейнере\r\n  addItem(element) {\r\n    this._container.prepend(element);\r\n  }\r\n\r\n  _clear() {\r\n    this._container.innerHTML = '';\r\n  }\r\n\r\n  // отрисовка элемента\r\n  renderItems() {\r\n    this._renderedItems.forEach(item => {\r\n      this._renderer(item);\r\n    });\r\n  }\r\n}\r\n","import {\r\n  cardElementSelector,\r\n  cardImageSelector,\r\n  cardTitleSelector,\r\n  cardDeleteBtnSelector,\r\n  cardDeleteBtnInactiveModifier,\r\n  cardLikeBtnSelector,\r\n  cardLikeBtnActiveModifier,\r\n  cardLikesCountSelector,\r\n} from \"../utils/constants.js\";\r\n\r\nexport default class Card {\r\n  constructor(\r\n    { _id, name, link, userId, likes, owner },\r\n    handleCardClick,\r\n    handleLikeClick,\r\n    handleDeleteClick,\r\n    templateSelector\r\n  ) {\r\n    this._id = _id;\r\n    this._name = name;\r\n    this._alt = name;\r\n    this._link = link;\r\n    this.likesCount = likes.length;\r\n    this._isMyCard = owner._id === userId;\r\n    this.isLiked = likes.some((like) => like._id === userId);\r\n    this._selector = templateSelector;\r\n    this._handleCardClick = handleCardClick;\r\n    this._handleLikeClick = handleLikeClick;\r\n    this._handleDeleteClick = handleDeleteClick;\r\n  }\r\n  _getElement() {\r\n    // создаем новую карточку по шаблону из разметки\r\n    const cardElement = document\r\n      .querySelector(this._selector)\r\n      .content.querySelector(cardElementSelector)\r\n      .cloneNode(true);\r\n\r\n    return cardElement;\r\n  }\r\n\r\n  create() {\r\n    this._element = this._getElement();\r\n    this._element.querySelector(cardTitleSelector).textContent = this._name;\r\n    this._element.querySelector(cardImageSelector).src = this._link;\r\n    this._element.querySelector(cardImageSelector).alt = this._name;\r\n    this.toggleLikeButton();\r\n    // заполняем шаблон карточки данными, полученными с сервера\r\n    this._setEventListeners();\r\n    // устанавливаем слушателей событиям карточки\r\n\r\n    if (!this._isMyCard)\r\n      // удалить можно только свою карточку\r\n      this._element\r\n        .querySelector(cardDeleteBtnSelector)\r\n        .classList.add(cardDeleteBtnInactiveModifier);\r\n\r\n    return this._element;\r\n  }\r\n\r\n  delete() {\r\n    this._element.remove();\r\n  }\r\n\r\n  toggleLikeButton() {\r\n    // функция изменения внешнего вида кнопки и счетчика лайков\r\n    const likeButtonElement = this._element.querySelector(cardLikeBtnSelector);\r\n\r\n    if (this.isLiked)\r\n      likeButtonElement.classList.add(cardLikeBtnActiveModifier);\r\n    else likeButtonElement.classList.remove(cardLikeBtnActiveModifier);\r\n\r\n    this._element.querySelector(cardLikesCountSelector).textContent =\r\n      this.likesCount;\r\n  }\r\n\r\n  _setEventListeners() {\r\n    // слушатели, устанавливамые на элементы карточки при ее создании (приватный метод)\r\n    this._element\r\n      .querySelector(cardImageSelector)\r\n      .addEventListener(\"click\", () => {\r\n        this._handleCardClick();\r\n      });\r\n\r\n    this._element\r\n      .querySelector(cardLikeBtnSelector)\r\n      .addEventListener(\"click\", () => {\r\n        this._handleLikeClick(this._id, this.isLiked);\r\n      });\r\n\r\n    this._element\r\n      .querySelector(cardDeleteBtnSelector)\r\n      .addEventListener(\"click\", () => {\r\n        // создаем слушатель на событие нажатия на кнопку \"Удалить\"\r\n        this._handleDeleteClick(this._id);\r\n      });\r\n  }\r\n}\r\n","export default class FormValidator {\r\n  constructor(validationConfig, formElement) {\r\n    this._formElement = formElement;\r\n    this._inputSelector = validationConfig.inputSelector;\r\n    this._submitButtonSelector = validationConfig.submitButtonSelector;\r\n    this._inputErrorClass = validationConfig.inputErrorClass;\r\n    this._errorClass = validationConfig.errorClass;\r\n    this._inactiveButtonClass = validationConfig.inactiveButtonClass;\r\n  }\r\n\r\n  _showInputError(inputElement, errorMessage) {\r\n    const errorElement = this._formElement.querySelector(\r\n      `.${inputElement.id}-error`\r\n    );\r\n    inputElement.classList.add(this._inputErrorClass);\r\n    errorElement.textContent = errorMessage;\r\n    errorElement.classList.add(this._errorClass);\r\n  }\r\n\r\n  _hideInputError(inputElement) {\r\n    const errorElement = this._formElement.querySelector(\r\n      `.${inputElement.id}-error`\r\n    );\r\n    inputElement.classList.remove(this._inputErrorClass);\r\n    errorElement.classList.remove(this._errorClass);\r\n    errorElement.textContent = \"\";\r\n  }\r\n\r\n  _checkInputValidity(inputElement) {\r\n    // проверка поля на валидность\r\n    if (!inputElement.validity.valid) {\r\n      this._showInputError(inputElement, inputElement.validationMessage);\r\n    } else {\r\n      this._hideInputError(inputElement);\r\n    }\r\n  }\r\n\r\n  _hasInvalidInput() {\r\n    // проверка наличия невалидных символов в поле\r\n    return this._inputList.some((inputElement) => {\r\n      return !inputElement.validity.valid;\r\n    });\r\n  }\r\n\r\n  _toggleButtonState() {\r\n    // изменение активности кнопки сабмита в зависимости от валидности данных\r\n    if (this._hasInvalidInput()) {\r\n      this._buttonElement.classList.add(this._inactiveButtonClass);\r\n      this._buttonElement.setAttribute(\"disabled\", true);\r\n    } else {\r\n      this._buttonElement.classList.remove(this._inactiveButtonClass);\r\n      this._buttonElement.removeAttribute(\"disabled\");\r\n    }\r\n  }\r\n\r\n  _setEventListeners() {\r\n    // слушатели на поля ввода формы (live-validation)\r\n    this._inputList = Array.from(\r\n      this._formElement.querySelectorAll(this._inputSelector)\r\n    );\r\n    this._buttonElement = this._formElement.querySelector(\r\n      this._submitButtonSelector\r\n    );\r\n    this._inputList.forEach((inputElement) => {\r\n      inputElement.addEventListener(\"input\", () => {\r\n        this._checkInputValidity(inputElement);\r\n        this._toggleButtonState();\r\n      });\r\n    });\r\n  }\r\n\r\n  resetValidation() {\r\n    this._inputList.forEach((inputElement) => {\r\n      this._hideInputError(inputElement);\r\n    });\r\n    this._toggleButtonState();\r\n  }\r\n\r\n  enableValidation() {\r\n    // публичный метод, включает валидацию формы.\r\n    // для каждой проверяемой формы создается экземпляр класса FormValidator\r\n    this._setEventListeners(this._formElement);\r\n    this._formElement.addEventListener(\"submit\", (evt) => {\r\n      evt.preventDefault();\r\n    });\r\n  }\r\n}\r\n","import {\r\n  popupCloseBtnSelector,\r\n  popupOpenedSelector,\r\n} from \"../utils/constants.js\";\r\n\r\nexport default class Popup {\r\n  constructor(popupSelector) {\r\n    this._popupSelector = popupSelector;\r\n    this._popupElement = document.querySelector(`.${popupSelector}`);\r\n    this._handleEscClose = this._handleEscClose.bind(this);\r\n    /* Т.к. this определяется в момент вызова, для объектов Popup при вызове\r\n    setEventListeners из index.js контекст будет равен Window.\r\n    Чтобы этого избежать, необходимо забайндить приватный метод _handleEscClose\r\n    на текущий объект класса Popup */\r\n  }\r\n\r\n  // открытие модального окна\r\n  open() {\r\n    this._popupElement.classList.add(popupOpenedSelector);\r\n    window.addEventListener(\"keyup\", this._handleEscClose);\r\n  }\r\n\r\n  // закрытие модального окна\r\n  close() {\r\n    this._popupElement.classList.remove(popupOpenedSelector);\r\n    window.removeEventListener(\"keyup\", this._handleEscClose);\r\n  }\r\n\r\n  // закрытие модального окна по кнопке Esc\r\n  _handleEscClose(evt) {\r\n    if (evt.key === \"Escape\") {\r\n      this.close();\r\n    }\r\n  }\r\n\r\n  // слушатели родительского класса, устанавливаются в index.js\r\n  setEventListeners() {\r\n    this._popupElement.addEventListener(\"click\", (evt) => {\r\n      if (\r\n        evt.target.classList.contains(popupCloseBtnSelector) ||\r\n        evt.target.classList.contains(this._popupSelector)\r\n      )\r\n        this.close();\r\n    });\r\n  }\r\n}\r\n","import {\r\n  formSelector,\r\n  formFieldSelector,\r\n  formSubmitBtnSelector,\r\n} from \"../utils/constants.js\";\r\n\r\nimport Popup from \"./Popup.js\";\r\n\r\nexport default class PopupWithForm extends Popup {\r\n  constructor({ popupSelector, handleFormSubmit }) {\r\n    super(popupSelector);\r\n    this._handleFormSubmit = handleFormSubmit;\r\n    this._formElement = this._popupElement.querySelector(formSelector);\r\n    this._inputList = Array.from(\r\n      this._formElement.querySelectorAll(formFieldSelector)\r\n    );\r\n    this._buttonSubmit = this._popupElement.querySelector(\r\n      formSubmitBtnSelector\r\n    );\r\n    this._buttonText = this._buttonSubmit.textContent;\r\n  }\r\n\r\n  _getInputValues() {\r\n    // создаём пустой объект\r\n    this._formValues = {};\r\n    // добавляем в этот объект значения всех полей\r\n    this._inputList.forEach((input) => {\r\n      this._formValues[input.name] = input.value;\r\n    });\r\n    // возвращаем объект значений\r\n    return this._formValues;\r\n  }\r\n\r\n  renderLoading(isLoading) {\r\n    // лоадер загрузки данных на сервер/с сервера\r\n    if (isLoading) {\r\n      this._buttonSubmit.textContent = \"Сохранение...\";\r\n    } else {\r\n      this._buttonSubmit.textContent = this._buttonText;\r\n    }\r\n  }\r\n\r\n  close() {\r\n    super.close();\r\n    this._formElement.reset();\r\n    // при закрытии форма должна очищаться\r\n  }\r\n\r\n  setEventListeners() {\r\n    super.setEventListeners();\r\n    this._formElement.addEventListener(\"submit\", (evt) => {\r\n      // обработчик сабмита формы\r\n      evt.preventDefault();\r\n      this._handleFormSubmit(this._getInputValues());\r\n    });\r\n  }\r\n}\r\n","import { formSelector, formSubmitBtnSelector } from \"../utils/constants.js\";\r\n\r\nimport Popup from \"./Popup.js\";\r\n\r\nexport default class PopupWithApply extends Popup {\r\n  constructor(popupSelector) {\r\n    super(popupSelector);\r\n    this._formElement = this._popupElement.querySelector(formSelector);\r\n    this._buttonSubmit = this._popupElement.querySelector(\r\n      formSubmitBtnSelector\r\n    );\r\n    this._buttonText = this._buttonSubmit.textContent;\r\n  }\r\n\r\n  apply(handleFormSubmit) {\r\n  // обрабатываем коллбэк подтверждения удаления карточки\r\n    this._handleFormSubmit = handleFormSubmit;\r\n  }\r\n\r\n  renderLoading(isLoading) {\r\n    // лоадер загрузки данных на сервер/с сервера\r\n    if (isLoading) {\r\n      this._buttonSubmit.textContent = \"Удаление...\";\r\n    } else {\r\n      this._buttonSubmit.textContent = this._buttonText;\r\n    }\r\n  }\r\n\r\n  setEventListeners() {\r\n    super.setEventListeners();\r\n    this._formElement.addEventListener(\"submit\", (evt) => {\r\n      // обработчик сабмита формы\r\n      evt.preventDefault();\r\n      this._handleFormSubmit();\r\n    });\r\n  }\r\n}\r\n","import {\r\n  popupImageSelector,\r\n  popupImageTitleSelector,\r\n} from \"../utils/constants.js\";\r\n\r\nimport Popup from \"./Popup.js\";\r\n\r\nexport default class PopupWithImage extends Popup {\r\n  constructor(popupSelector) {\r\n    super(popupSelector);\r\n    // ключевым словом super вызываем конструктор родительского класса\r\n    // это необходимо, для определения селектора внутри PopupWithImage\r\n    this._popupImage = this._popupElement.querySelector(`.${popupImageSelector}`);\r\n    this._popupImageTitle = this._popupElement.querySelector(\r\n      `.${popupImageTitleSelector}`\r\n    );\r\n  }\r\n\r\n  open({ link, name }) {\r\n    super.open(); // вызываем родительский метод\r\n    // дополним open новой функциональностью:\r\n    this._popupImage.src = link;\r\n    this._popupImage.alt = name;\r\n    this._popupImageTitle.textContent = name;\r\n  }\r\n}\r\n","// класс для взаимодействия с сервером\r\nexport default class Api {\r\n  constructor({ baseUrl, headers }) {\r\n    this._baseUrl = baseUrl;\r\n    this._headers = headers;\r\n  }\r\n\r\n  _checkResponse(res) {\r\n    // проверка ответа сервера на корректность\r\n    if (res.ok) return res.json();\r\n    return Promise.reject(`Ошибка: ${res.status}`);\r\n  }\r\n\r\n  //-------\r\n  // запрос данных пользователя\r\n  getUserData() {\r\n    return fetch(`${this._baseUrl}/users/me`, {\r\n      headers: this._headers,\r\n    }).then(this._checkResponse);\r\n  }\r\n\r\n  //-------\r\n  // загрузка начальных карточек с сервера ✓\r\n  getInitialCards() {\r\n    return fetch(`${this._baseUrl}/cards`, {\r\n      headers: this._headers,\r\n    }).then(this._checkResponse);\r\n  }\r\n\r\n  //-------\r\n  // обновление данных профиля после редактирования\r\n  updateUserData({ name, about }) {\r\n    return fetch(`${this._baseUrl}/users/me`, {\r\n      method: \"PATCH\",\r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        name: name,\r\n        about: about,\r\n      }),\r\n    }).then(this._checkResponse);\r\n  }\r\n\r\n  //-------\r\n  // обновление аватара\r\n  updateProfileAvatar(avatarUrl) {\r\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\r\n      method: \"PATCH\",\r\n      headers: this._headers,\r\n      body: JSON.stringify(avatarUrl),\r\n    }).then(this._checkResponse);\r\n  }\r\n\r\n  //-------\r\n  //добавление новой карточки\r\n  postCard({ place, picture }) {\r\n    return fetch(`${this._baseUrl}/cards`, {\r\n      method: \"POST\",\r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        name: place,\r\n        link: picture,\r\n      }),\r\n    }).then(this._checkResponse);\r\n  }\r\n  //-------\r\n\r\n  deleteCard = (cardId) => {\r\n    // удаление карточки с сервера\r\n    return fetch(`${this._baseUrl}/cards/${cardId}`, {\r\n      method: \"DELETE\",\r\n      headers: this._headers,\r\n    }).then(this._checkResponse);\r\n  };\r\n\r\n  //лайк карточки\r\n  //-------\r\n  setLike = (cardId) => {\r\n    // удаление карточки с сервера\r\n    return fetch(`${this._baseUrl}/cards/likes/${cardId}`, {\r\n      method: \"PUT\",\r\n      headers: this._headers,\r\n    }).then(this._checkResponse);\r\n  };\r\n\r\n  // удаление лайка с карточки\r\n  //-------\r\n  deleteLike = (cardId) => {\r\n    return fetch(`${this._baseUrl}/cards/likes/${cardId}`, {\r\n      method: \"DELETE\",\r\n      headers: this._headers,\r\n    }).then(this._checkResponse);\r\n  };\r\n}\r\n","//Яндекс:\r\n//Класс UserInfo отвечает за управление информацией о пользователе на странице. Этот класс:\r\n//Принимает в конструктор объект с селекторами двух элементов:\r\n//элемента имени пользователя и элемента информации о себе.\r\n//Содержит публичный метод getUserInfo,\r\n//который возвращает объект с данными пользователя.\r\n//Данные для этого метода нужно получать от методов класса Api — подумайте над тем,\r\n//как внедрить метод класса Api в getUserInfo.\r\n//Когда данные пользователя нужно будет подставить в форму при открытии — метод вам пригодится.\r\n//Содержит публичный метод setUserInfo, который принимает новые данные пользователя,\r\n//отправляет их на сервер и добавляет их на страницу.\r\n\r\nexport default class UserInfo {\r\n  constructor(\r\n    { profileTitleSelector, profileSubtitleSelector, profileAvatarSelector },\r\n    getUserData\r\n  ) {\r\n    this._name = document.querySelector(`.${profileTitleSelector}`);\r\n    this._about = document.querySelector(`.${profileSubtitleSelector}`);\r\n    this._avatarUrl = document.querySelector(`.${profileAvatarSelector}`);\r\n    this._getUserData = getUserData;\r\n  }\r\n\r\n  getUserInfo() {\r\n    // по ТЗ - данные должны возвращаться с сервера,\r\n    // getUserData - коллбэк обращения к api.getUserData\r\n    // при работе с экземпляром можно получить данные вот так:\r\n    // userInfo.getUserInfo().then(res => ...)\r\n    return this._getUserData();\r\n  }\r\n\r\n  setUserInfo({ _id, name, about, avatar }) {\r\n    this.userId = _id;\r\n    this._name.textContent = name;\r\n    this._about.textContent = about;\r\n    this._avatarUrl.src = avatar;\r\n  }\r\n}\r\n","import { loaderVisibleSelector } from \"../utils/constants.js\";\r\n\r\nexport default class Loader {\r\n  constructor(profileAvatarLoaderSelector) {\r\n    this._element = document.querySelector(`.${profileAvatarLoaderSelector}`);\r\n  }\r\n\r\n  renderLoading(isLoading = true) {\r\n    // лоадер загрузки данных на сервер/с сервера\r\n    if (isLoading) this._element.classList.add(loaderVisibleSelector);\r\n    else this._element.classList.remove(loaderVisibleSelector);\r\n  }\r\n}\r\n","\"use strict\";\r\n\r\nimport \"./index.css\";\r\n// импорт главного файла стилей\r\nimport {\r\n  cardListSelector,\r\n  cardTemplateSelector,\r\n  popupEditAvatarSelector,\r\n  popupAddCardSelector,\r\n  popupDeleteCardSelector,\r\n  popupEditProfileSelector,\r\n  popupPreviewImageSelector,\r\n  profileTitleSelector,\r\n  profileSubtitleSelector,\r\n  profileAvatarSelector,\r\n  profileAvatarLoaderSelector,\r\n  formEditProfile,\r\n  formEditProfileAboutField,\r\n  formEditProfileNameField,\r\n  formEditAvatar,\r\n  formAddCard,\r\n  buttonAddCard,\r\n  buttonEditProfile,\r\n  profileAvatarContainer,\r\n  validationConfig,\r\n} from \"../utils/constants.js\";\r\n// ииморт констант (селекторы и пр.)\r\n\r\nimport Section from \"../components/Section.js\";\r\nimport Card from \"../components/Card.js\";\r\nimport FormValidator from \"../components/FormValidator.js\";\r\nimport PopupWithForm from \"../components/PopupWithForm.js\";\r\nimport PopupWithApply from \"../components/PopupWithApply.js\";\r\nimport PopupWithImage from \"../components/PopupWithImage.js\";\r\nimport Api from \"../components/Api.js\";\r\nimport UserInfo from \"../components/UserInfo.js\";\r\nimport Loader from \"../components/Loader\";\r\n\r\nconst api = new Api({\r\n  // объект для работы с api сервера\r\n  baseUrl: \"https://nomoreparties.co/v1/plus-cohort-2\",\r\n  headers: {\r\n    authorization: \"077bc8dc-0b44-4a3f-8309-cb8bcf80fcc6\",\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\nconst user = new UserInfo(\r\n  // объект для работы с данными пользователя\r\n  {\r\n    profileTitleSelector,\r\n    profileSubtitleSelector,\r\n    profileAvatarSelector,\r\n  },\r\n  () => api.getUserData()\r\n);\r\n\r\nconst cardElementsList = new Section(\r\n  // объект для рендеринга карточек на страницу\r\n  {\r\n    renderer: (cardData) => {\r\n      cardElementsList.addItem(createNewCard(cardData));\r\n    },\r\n  },\r\n  cardListSelector\r\n);\r\n\r\nconst avatarLoader = new Loader(profileAvatarLoaderSelector);\r\n\r\n//--------------- Включение валидации форм на странице ------------------------\r\nconst formEditProfileValiadtor = new FormValidator(\r\n  validationConfig,\r\n  formEditProfile\r\n);\r\nconst formEditAvatarValiadtor = new FormValidator(\r\n  validationConfig,\r\n  formEditAvatar\r\n);\r\nconst formAddCardValidator = new FormValidator(validationConfig, formAddCard);\r\n\r\nformEditProfileValiadtor.enableValidation();\r\nformEditAvatarValiadtor.enableValidation();\r\nformAddCardValidator.enableValidation();\r\n\r\n//-------------- Логика работы модальных окон на странице -----------------------\r\n// попап редактирования профиля пользователя\r\nconst popupEditProfile = new PopupWithForm({\r\n  popupSelector: popupEditProfileSelector,\r\n  handleFormSubmit: (data) => {\r\n    popupEditProfile.renderLoading(true);\r\n    api\r\n      .updateUserData(data)\r\n      .then((data) => {\r\n        user.setUserInfo(data);\r\n        popupEditProfile.close();\r\n      })\r\n      .catch((err) => {\r\n        console.log(`Ошибка: ${err}`);\r\n      })\r\n      .finally(() => {\r\n        popupEditProfile.renderLoading(false);\r\n      });\r\n  },\r\n});\r\n\r\n// попап обновления аватара\r\nconst popupEditAvatar = new PopupWithForm({\r\n  popupSelector: popupEditAvatarSelector,\r\n  handleFormSubmit: (data) => {\r\n    popupEditAvatar.renderLoading(true);\r\n    avatarLoader.renderLoading();\r\n    api\r\n      .updateProfileAvatar(data)\r\n      .then((data) => {\r\n        user.setUserInfo(data);\r\n        popupEditAvatar.close();\r\n        avatarLoader.renderLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        console.log(`${err}`);\r\n      })\r\n      .finally(() => {\r\n        popupEditAvatar.renderLoading(false);\r\n      });\r\n  },\r\n});\r\n\r\n// попап добавления карточки\r\nconst popupAddCard = new PopupWithForm({\r\n  popupSelector: popupAddCardSelector,\r\n  handleFormSubmit: (inputData) => {\r\n    popupAddCard.renderLoading(true);\r\n    api\r\n      .postCard(inputData)\r\n      .then((cardData) => {\r\n        cardElementsList.addItem(createNewCard(cardData));\r\n        popupAddCard.close();\r\n      })\r\n      .catch((err) => {\r\n        console.log(`${err}`);\r\n      })\r\n      .finally(() => {\r\n        popupAddCard.renderLoading(false);\r\n      });\r\n  },\r\n});\r\n\r\n// попап подтверждения удаления карточки\r\nconst popupDeleteCard = new PopupWithApply(popupDeleteCardSelector);\r\n\r\nbuttonEditProfile.addEventListener(\"click\", () => {\r\n  // обработчик кнопки редактирования профиля пользователя\r\n  user\r\n    .getUserInfo()\r\n    .then((res) => {\r\n      formEditProfileNameField.value = res.name;\r\n      formEditProfileAboutField.value = res.about;\r\n      formEditProfileValiadtor.resetValidation();\r\n      popupEditProfile.open();\r\n    })\r\n    .catch((err) => {\r\n      console.log(`Ошибка: ${err}`);\r\n    });\r\n});\r\n\r\nbuttonAddCard.addEventListener(\"click\", () => {\r\n  // обработчик кнопки добавления новой карточки\r\n  formAddCardValidator.resetValidation();\r\n  popupAddCard.open();\r\n});\r\n\r\nprofileAvatarContainer.addEventListener(\"click\", () => {\r\n  // обработчик кнопки обновления аватара пользователя\r\n  formEditAvatarValiadtor.resetValidation();\r\n  popupEditAvatar.open();\r\n});\r\n\r\n// попап окна просмотра фото в карточке\r\nconst popupWithImage = new PopupWithImage(popupPreviewImageSelector);\r\n\r\npopupAddCard.setEventListeners();\r\npopupWithImage.setEventListeners();\r\npopupEditProfile.setEventListeners();\r\npopupEditAvatar.setEventListeners();\r\npopupDeleteCard.setEventListeners();\r\n\r\nfunction createNewCard(cardData) {\r\n  // логика создания карточки вынесена в отдельную функцию\r\n  // для более удобного взаимодействия между экземплярами классов\r\n  cardData.userId = user.userId;\r\n  const card = new Card(\r\n    cardData,\r\n    () => {\r\n      popupWithImage.open(cardData);\r\n    },\r\n    (id, isLiked) => {\r\n      if (isLiked) {\r\n        api\r\n          .deleteLike(id)\r\n          // удаляем лайк с карточки\r\n          .then((data) => {\r\n            card.likesCount = data.likes.length;\r\n            card.isLiked = false;\r\n            card.toggleLikeButton();\r\n          })\r\n          .catch((err) => {\r\n            console.log(`Ошибка: ${err}`);\r\n          });\r\n      } else {\r\n        api\r\n          .setLike(id)\r\n          // ставим лайк карточке\r\n          .then((data) => {\r\n            card.likesCount = data.likes.length;\r\n            card.isLiked = true;\r\n            card.toggleLikeButton();\r\n          })\r\n          .catch((err) => {\r\n            console.log(`Ошибка: ${err}`);\r\n          });\r\n      }\r\n    },\r\n    (id) => {\r\n      popupDeleteCard.open();\r\n      // перед удалением карточки спрашиваем подтверждение\r\n      popupDeleteCard.apply(() => {\r\n        // подтверждение удаления (коллбэк сабмита формы)\r\n        popupDeleteCard.renderLoading(true);\r\n        api\r\n          .deleteCard(id)\r\n          .then(() => {\r\n            card.delete();\r\n            popupDeleteCard.close();\r\n          })\r\n          .catch((err) => {\r\n            console.log(`Ошибка: ${err}`);\r\n          })\r\n          .finally(() => {\r\n            popupDeleteCard.renderLoading(false);\r\n          });\r\n      });\r\n    },\r\n    cardTemplateSelector\r\n  );\r\n  const cardElement = card.create();\r\n  return cardElement;\r\n}\r\n\r\n//-------------------------- Загрузка данных на страницу -------------------------\r\nPromise.all([api.getUserData(), api.getInitialCards()])\r\n  // карточки должны отображаться на странице только после получения id пользователя\r\n  .then(([userData, cards]) => {\r\n    user.setUserInfo(userData);\r\n    cards.forEach((card) => cardElementsList.addItem(createNewCard(card)));\r\n  })\r\n  .catch((err) => {\r\n    console.log(err);\r\n  });\r\n"],"names":["cardImageSelector","cardDeleteBtnSelector","cardLikeBtnSelector","cardLikeBtnActiveModifier","popupOpenedSelector","formSelector","formSubmitBtnSelector","loaderVisibleSelector","formEditProfile","document","querySelector","formEditProfileNameField","elements","formEditProfileAboutField","formEditAvatar","formAddCard","profileAvatarContainer","buttonEditProfile","buttonAddCard","validationConfig","fieldsetSelector","inputSelector","submitButtonSelector","inactiveButtonClass","inputErrorClass","errorClass","Section","containerSelector","data","renderer","this","_renderedItems","_renderer","_container","element","prepend","innerHTML","forEach","item","Card","handleCardClick","handleLikeClick","handleDeleteClick","templateSelector","_id","name","link","userId","likes","owner","_name","_alt","_link","likesCount","length","_isMyCard","isLiked","some","like","_selector","_handleCardClick","_handleLikeClick","_handleDeleteClick","content","cloneNode","_element","_getElement","textContent","src","alt","toggleLikeButton","_setEventListeners","classList","add","remove","likeButtonElement","addEventListener","FormValidator","formElement","_formElement","_inputSelector","_submitButtonSelector","_inputErrorClass","_errorClass","_inactiveButtonClass","inputElement","errorMessage","errorElement","id","validity","valid","_hideInputError","_showInputError","validationMessage","_inputList","_hasInvalidInput","_buttonElement","setAttribute","removeAttribute","Array","from","querySelectorAll","_checkInputValidity","_toggleButtonState","evt","preventDefault","Popup","popupSelector","_popupSelector","_popupElement","_handleEscClose","bind","window","removeEventListener","key","close","target","contains","PopupWithForm","handleFormSubmit","_handleFormSubmit","_buttonSubmit","_buttonText","_formValues","input","value","isLoading","reset","_getInputValues","PopupWithApply","PopupWithImage","_popupImage","_popupImageTitle","Api","baseUrl","headers","cardId","fetch","_baseUrl","method","_headers","then","_checkResponse","res","ok","json","Promise","reject","status","about","body","JSON","stringify","avatarUrl","place","picture","UserInfo","getUserData","profileTitleSelector","profileSubtitleSelector","profileAvatarSelector","_about","_avatarUrl","_getUserData","avatar","Loader","profileAvatarLoaderSelector","api","authorization","user","cardElementsList","cardData","addItem","createNewCard","avatarLoader","formEditProfileValiadtor","formEditAvatarValiadtor","formAddCardValidator","enableValidation","popupEditProfile","renderLoading","updateUserData","setUserInfo","catch","err","console","log","finally","popupEditAvatar","updateProfileAvatar","popupAddCard","inputData","postCard","popupDeleteCard","getUserInfo","resetValidation","open","popupWithImage","card","deleteLike","setLike","apply","deleteCard","delete","create","setEventListeners","all","getInitialCards","userData","cards"],"sourceRoot":""}